# -*- coding: utf-8 -*-
"""Vulnerability_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EYd7ysE2-4jQe2VlV366wHrvDozbgBhC
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from scipy.special import expit

# Data for logistic regression
x_log = [1,10,20,30,50,65,70,75,80,85,90,95,100]
y_log = [0,0,0,0,0,1,1,1,1,1,1,1,1]

x_log = np.asarray(x_log)
y_log = np.asarray(y_log)

# Fit the classifier
clf = LogisticRegression()
clf.fit(x_log.reshape(-1, 1), y_log.reshape(-1, 1))

# Data for logistic equations
x_eq = np.linspace(0, 400, 101)

alpha_y = 60
beta_y = 10
y_y = ((x_eq / alpha_y) ** beta_y) / (1 + ((x_eq / alpha_y) ** beta_y))

alpha_ny = 50
beta_ny = 10
y_ny = ((x_eq / alpha_ny) ** beta_ny) / (1 + ((x_eq / alpha_ny) ** beta_ny))

# Creating the plot
fig, ax = plt.subplots(dpi=100)

# Plot for logistic regression
x_test = np.linspace(20, 100, 100)
loss = expit(x_test * clf.coef_ + clf.intercept_).ravel()
ax.scatter(x_log, y_log, color="black", zorder=20)
ax.plot(x_test, loss, color="red", linewidth=3, label='Logistic Regression')

# Plot for logistic equations
ax.plot(x_eq, y_y, label='Yawning')
ax.plot(x_eq, y_ny, label='No-Yawning')

# Setting plot properties
ax.set_xlim([0, 250])
ax.set_xlabel('Wind speed of gust [m/s]')
ax.set_ylabel('Damage probability')
ax.legend()

plt.show()